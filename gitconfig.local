[user]
  name = Paulo Pao
  email = paulo@redant.com.au

[core]
  editor = vim

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[merge]
  ff = false

[alias]
  # branch
  b = branch -v --sort=-committerdate  # branch (verbose)

  # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase
  ra = rebase --abort               # abort rebase

  # status
  s = status                        # status

  # remove all deleted files
  rmf = rm $(git ls-files --deleted)

  # remove all merged branches
  cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

  # manually invoke ctags
  ctags = !.git/hooks/ctags

  # list recent commits in a readable format
  recent = branch --sort=-committerdate --format=\"%(committerdate:relative)%09%(refname:short)\"
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[apply]
  whitespace = nowarn

[branch]
  autosetupmerge = true

[advice]
  statusHints = false

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true

[hub]
  protocol = https
